import json
import re

from django.core.files.base import ContentFile
from django.core.files.storage import default_storage
from botadvisors.models import *
from telegram import *
from munch import DefaultMunch
from datetime import datetime, timedelta
from pathlib import Path


def interview_step(user_interview: Interview, bot: Bot, update: Update):
    if update.message.text and update.message.text == '/refresh':
        user_interview.step = InterviewStep.start_test.value
        user_interview.save()
        keyboard_markup = [[
            KeyboardButton(text='–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'),
        ]]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω—É–ª–µ–Ω–æ!',
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
    elif update.message.text and update.message.text == '/start-fresh':
        user_interview.interview_answers = {}
        user_interview.google_table_row = None
        user_interview.step = InterviewStep.start.value
        user_interview.save()

    if user_interview.step == InterviewStep.start.value:
        step_start(user_interview, bot)
    elif user_interview.step == InterviewStep.start_1.value:
        step_start_1(user_interview, bot, update)
    elif user_interview.step == InterviewStep.start_2.value:
        step_start_2(user_interview, bot, update)
    elif user_interview.step == InterviewStep.start_3.value:
        step_start_3(user_interview, bot, update)
    elif user_interview.step == InterviewStep.start_4.value:
        step_start_4(user_interview, bot, update)
    elif user_interview.step == InterviewStep.start_end.value:
        step_start_end(user_interview, bot, update)
    elif user_interview.step == InterviewStep.surname.value:
        step_surname(user_interview, bot, update)
    elif user_interview.step == InterviewStep.name.value:
        step_name(user_interview, bot, update)
    elif user_interview.step == InterviewStep.patronymic.value:
        step_patronymic(user_interview, bot, update)
    elif user_interview.step == InterviewStep.date_of_birth.value:
        step_date_of_birth(user_interview, bot, update)
    elif user_interview.step == InterviewStep.gender.value:
        step_gender(user_interview, bot, update)
    elif user_interview.step == InterviewStep.photo.value:
        step_photo(user_interview, bot, update)
    elif user_interview.step == InterviewStep.phone_number.value:
        step_phone_number(user_interview, bot, update)
    elif user_interview.step == InterviewStep.email.value:
        step_email(user_interview, bot, update)
    elif user_interview.step == InterviewStep.social_networks.value:
        step_social_networks(user_interview, bot, update)
    elif user_interview.step == InterviewStep.adm_okr.value:
        step_adm_okr(user_interview, bot, update)
    elif user_interview.step == InterviewStep.education.value:
        step_education(user_interview, bot, update)
    elif user_interview.step == InterviewStep.place_education.value:
        step_place_education(user_interview, bot, update)
    elif user_interview.step == InterviewStep.place_education_2.value:
        step_place_education_2(user_interview, bot, update)
    elif user_interview.step == InterviewStep.place_education_stop.value:
        step_place_education_stop(user_interview, bot, update)
    elif user_interview.step == InterviewStep.napr_education.value:
        step_napr_education(user_interview, bot, update)
    elif user_interview.step == InterviewStep.doc_education.value:
        step_doc_education(user_interview, bot, update)
    elif user_interview.step == InterviewStep.add_education.value:
        step_add_education(user_interview, bot, update)
    elif user_interview.step == InterviewStep.work_experience.value:
        step_work_experience(user_interview, bot, update)
    elif user_interview.step == InterviewStep.job_title.value:
        step_job_title(user_interview, bot, update)
    elif user_interview.step == InterviewStep.add_work.value:
        step_add_work(user_interview, bot, update)
    elif user_interview.step == InterviewStep.achievements.value:
        step_achievements(user_interview, bot, update)
    elif user_interview.step == InterviewStep.prof_skills.value:
        step_prof_skills(user_interview, bot, update)
    elif user_interview.step == InterviewStep.pers_qualities.value:
        step_pers_qualities(user_interview, bot, update)
    elif user_interview.step == InterviewStep.exp_children.value:
        step_exp_children(user_interview, bot, update)
    elif user_interview.step == InterviewStep.ed_oo_work.value:
        step_ed_oo_work(user_interview, bot, update)
    elif user_interview.step == InterviewStep.ed_oo_work.value:
        step_ed_oo_work(user_interview, bot, update)
    elif user_interview.step == InterviewStep.add_adm_okr.value:
        step_add_adm_okr(user_interview, bot, update)
    elif user_interview.step == InterviewStep.test.value:
        text = update.message.text.encode('utf-8').decode()
        test_step(user_interview, bot, text)
    elif user_interview.step == InterviewStep.start_test.value:
        start_user_test(user_interview, bot, update)
    elif user_interview.step == InterviewStep.finish_end.value:
        finish_end(user_interview, bot, update)


def finish_end(user_interview: Interview, bot: Bot, update: Update):
    if update.message.text:
        text = update.message.text.encode('utf-8').decode()
        if 'http' in text:
            user_interview.video_url = text
            user_interview.update_step(InterviewStep.end)
            user_interview.save_video_url_to_table()
            message = '''
üëç–°–ø–∞—Å–∏–±–æ!

üé¶–í–∞—à–µ –≤–∏–¥–µ–æ –ø–æ—Å—Ç—É–ø–∏–ª–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –∫–æ–Ω–∫—É—Ä—Å–∞.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. 

üìû–ü—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Å –í–∞–º–∏ –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.

üí¨–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥.'''
            bot.send_message(
                chat_id=user_interview.chat_id,
                text=message,
                parse_mode=ParseMode.HTML,
            )
            return

        bot.send_message(
            chat_id=user_interview.chat_id,
            text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–æ—á—Ç–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤—ã—à–µ.',
            parse_mode=ParseMode.HTML,
        )

    bot.send_message(
        chat_id=user_interview.chat_id,
        text='–û–±—Ä–∞—â–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∑–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫, –∞ –Ω–µ —Å–∞–º –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫!',
        parse_mode=ParseMode.HTML,
    )



def start_user_test(user_interview: Interview, bot: Bot, update: Update = ''):
    text = update.message.text.encode('utf-8').decode()
    if text != '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ':
        return

    question_list = Questions.get_questions_list()
    user_test_list = dict()
    for idx, question in enumerate(question_list):
        user_test_list.setdefault(idx, {
            'questing_id': question.questing_id,
            'block_name': question.block_name,
            'questing_text': question.questing_text,
            'answer_one_text': question.answer_one_text,
            'answer_one_balls': question.answer_one_balls,
            'answer_two_text': question.answer_two_text,
            'answer_two_balls': question.answer_two_balls,
            'answer_three_text': question.answer_three_text,
            'answer_three_balls': question.answer_three_balls,
            'answer_four_text': question.answer_four_text,
            'answer_four_balls': question.answer_four_balls,
            'answer_five_text': question.answer_five_text,
            'answer_five_balls': question.answer_five_balls,
            'answer_count': question.answer_count,
            'try_count': 0,
            'balls': 0
        })
    finish_time = datetime.now() + timedelta(minutes=60)
    user_interview.test_finish_time = finish_time
    user_interview.questing_balls = 0
    user_interview.questing_step = -1
    user_interview.questing_text = json.loads(json.dumps(user_test_list))
    user_interview.save()
    user_interview.update_step(InterviewStep.test)
    test_step(user_interview, bot, '')


def test_step(user_interview: Interview, bot: Bot, text: str = ''):
    question_list = dict(user_interview.questing_text)
    if len(text) > 100:
        text = text.replace('‚Ä¶', '')
    message_text = ''
    finish_time = user_interview.test_finish_time

    if finish_time.timestamp() < datetime.now().timestamp():
        user_interview.save_test_result_to_table()
        user_interview.update_step(InterviewStep.finish)
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
        return
    if user_interview.questing_step == -1:
        message_text += '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! \n' \
                        '–¢–µ—Å—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ ' + finish_time.strftime('%Y-%m-%d %H:%M:%S') + '\n\n'
        user_interview.questing_step += 1

        question = DefaultMunch.fromDict(question_list[f'{user_interview.questing_step}'])
        message_text += f'–í–æ–ø—Ä–æ—Å ‚Ññ{user_interview.questing_step + 1}:\n{question.questing_text}'
        if question.answer_count > 1:
            message_text += f'\n–í—ã–±–µ—Ä–∏—Ç–µ {question.answer_count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞'
    else:
        question = DefaultMunch.fromDict(question_list[f'{user_interview.questing_step}'])
        if len(text) > 100 and not question.answer_one_text.startswith(text) \
                and not question.answer_two_text.startswith(text) \
                and not question.answer_three_text.startswith(text) \
                and not question.answer_four_text.startswith(text) \
                and not question.answer_five_text.startswith(text):
            bot.send_message(
                chat_id=user_interview.chat_id,
                text='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨á',
                parse_mode=ParseMode.HTML,
            )
            return
        elif not question.answer_one_text != text \
                and not question.answer_two_text != text \
                and not question.answer_three_text != text \
                and not question.answer_four_text != text \
                and not question.answer_five_text != text:
            bot.send_message(
                chat_id=user_interview.chat_id,
                text='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨á',
                parse_mode=ParseMode.HTML,
            )
            return

        if question.answer_one_text.startswith(text) and question.answer_one_balls == 1:
            question.balls += 1
            question_list[f'{user_interview.questing_step}']['balls'] += 1
        elif question.answer_two_text.startswith(text) and question.answer_two_balls == 1:
            question.balls += 1
            question_list[f'{user_interview.questing_step}']['balls'] += 1
        elif question.answer_three_text.startswith(text) and question.answer_three_balls == 1:
            question.balls += 1
            question_list[f'{user_interview.questing_step}']['balls'] += 1
        elif question.answer_four_text.startswith(text) and question.answer_four_balls == 1:
            question.balls += 1
            question_list[f'{user_interview.questing_step}']['balls'] += 1
        elif question.answer_five_text.startswith(text) and question.answer_five_balls == 1:
            question.balls += 1
            question_list[f'{user_interview.questing_step}']['balls'] += 1

        question.try_count += 1
        question_list[f'{user_interview.questing_step}']['try_count'] += 1

    if question.try_count >= question.answer_count:
        if question.balls == question.answer_count:
            user_interview.questing_balls += 1

        user_interview.questing_step += 1
        if user_interview.questing_step >= len(question_list):
            user_interview.save_test_result_to_table()
            user_interview.update_step(InterviewStep.finish)
            bot.send_message(
                chat_id=user_interview.chat_id,
                text=f"–°–ø–∞—Å–∏–±–æ, –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –∫–æ–Ω–∫—É—Ä—Å–∞." \
                     f"–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–æ –≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É: —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é –≤ —ç—Ç–æ–º —á–∞—Ç-–±–æ—Ç–µ." \
                     f"–ü—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Å –í–∞–º–∏ –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –∞–Ω–∫–µ—Ç–µ." ,
                parse_mode=ParseMode.HTML,
                reply_markup=ReplyKeyboardRemove()
            )
            return

        question = DefaultMunch.fromDict(question_list[f'{user_interview.questing_step}'])
        message_text += f'–í–æ–ø—Ä–æ—Å ‚Ññ{user_interview.questing_step + 1}:\n{question.questing_text}'
        if question.answer_count > 1:
            message_text += f'\n–í—ã–±–µ—Ä–∏—Ç–µ {question.answer_count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞'
    elif question.try_count != 0 and question.try_count != question.answer_count:
        user_interview.questing_text = question_list
        user_interview.save()
        return

    user_interview.questing_text = question_list
    user_interview.save()

    first_line_markup = []
    second_line_markup = []
    third_line_markup = []
    if question.answer_one_text is not None and question.answer_one_text != '':
        first_line_markup.append(KeyboardButton(text=question.answer_one_text))
    if question.answer_two_text is not None and question.answer_two_text != '':
        first_line_markup.append(KeyboardButton(text=question.answer_two_text))
    if question.answer_three_text is not None and question.answer_three_text != '':
        second_line_markup.append(KeyboardButton(text=question.answer_three_text))
    if question.answer_four_text is not None and question.answer_four_text != '':
        second_line_markup.append(KeyboardButton(text=question.answer_four_text))
    if question.answer_five_text is not None and question.answer_five_text != '':
        third_line_markup.append(KeyboardButton(text=question.answer_five_text))

    keyboard_markup = []
    if len(first_line_markup) > 0:
        keyboard_markup.append(first_line_markup)
    if len(second_line_markup) > 0:
        keyboard_markup.append(second_line_markup)
    if len(third_line_markup) > 0:
        keyboard_markup.append(third_line_markup)

    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(keyboard_markup)
    )


def step_start(user_interview: Interview, bot: Bot):
    text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ" \
           f" –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—é –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –¥–µ—Ç—Å–∫–∏–º–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏!\n\n" \
           f"–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º —á–∞—Ç-–±–æ—Ç–µ\n\n" \
           f"–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,\n\n" \
           f"- –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å <a href='https://patriotsport.moscow/wp-content/uploads/2022/11/dc99d9d1-794b-4b98-bd1f-56c4565229ca.pdf'>–ü–æ–ª–æ–∂–µ–Ω–∏–µ–º –æ –∫–æ–Ω–∫—É—Ä—Å–µ</a>\n\n" \
           f"- –¥–∞–π—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ <a href='https://patriotsport.moscow/wp-content/uploads/2022/03/pril-3.pdf'>" \
           f"–æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>üëá\n\n"

    keyboard_markup = [
        [KeyboardButton(text='–° –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω')]
    ]
    with open('uploads/Patri.jpeg', 'rb') as photo:
        bot.send_photo(user_interview.chat_id, photo, caption=text, reply_markup=ReplyKeyboardMarkup(keyboard_markup),
                       parse_mode=ParseMode.HTML)
        user_interview.update_step(InterviewStep.start_1)


def step_start_1(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–° –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω':
        keyboard_markup = [
            [KeyboardButton(text='–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')]
        ]
        message_text = '–î–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Öüëá'
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
        user_interview.update_step(InterviewStep.start_2)


def step_start_2(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö':
        message_text = "–°–ø–∞—Å–∏–±–æ!\n\n " \
                       "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ, " \
                       "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, ¬´—Å–∫–∞–Ω—ã¬ª –∏–ª–∏ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ–º –≤–∏–¥–µ:\n\n " \
                       "- –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–¥–∏–ø–ª–æ–º (–≥–ª–∞–≤–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç), " \
                       "—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏))\n\n " \
                       "- –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∫–µ—Ç—ã\n\n" \
                       "–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è —á–∞—Ç-–±–æ—Ç–∞.\n\n" \
                       "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–π–º–µ—Ç —É –í–∞—Å –æ–∫–æ–ª–æ 30 –º–∏–Ω—É—Ç.\n\n" \
                       "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è¬ª, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.\n\n"
        keyboard_markup = [
            [KeyboardButton(text='–ü—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')]
        ]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
        user_interview.update_step(InterviewStep.start_3)


def step_start_3(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–ü—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è':
        message_text = "–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–≤–æ–¥–∏—Ç—å –í–∞—à–∏ " \
                       "–¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n" \
                       "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞–∫–æ–≤ " \
                       "(—ç—Ç–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ –≤ —Å–∞–º–æ–º –≤–æ–ø—Ä–æ—Å–µ).\n\n" \
                       "–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n\n" \
                       "–ï—Å–ª–∏ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏—Ç–µ, —á—Ç–æ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω—É—é " \
                       "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ —Ä–∞–∑–¥–µ–ª, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–º–µ–Ω—é¬ª –∏ –≤—ã–±—Ä–∞–≤ " \
                       "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç. –ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å ¬´–ù–∞–∑–∞–¥¬ª –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞. "
        keyboard_markup = [
            [KeyboardButton(text='–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ')]
        ]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
        user_interview.update_step(InterviewStep.start_4)


def step_start_4(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ':
        message_text = '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ "–°—Ç–∞—Ä—Ç"'
        keyboard_markup = [
            [KeyboardButton(text='–°—Ç–∞—Ä—Ç')]
        ]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
        user_interview.update_step(InterviewStep.start_end)


def step_start_end(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–°—Ç–∞—Ä—Ç':
        message_text = '–ë–ª–æ–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
        message_text = '–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –§–ê–ú–ò–õ–ò–Æ'
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
        user_interview.update_step(InterviewStep.surname)


def step_surname(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)
    interview_answers['surname'] = text
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.name)
    message_text = '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –ò–ú–Ø'
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )


def step_name(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)
    interview_answers['name'] = text
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.patronymic)
    message_text = '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –û–¢–ß–ï–°–¢–í–û'
    keyboard_markup = [
        [KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')]
    ]
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(keyboard_markup)
    )


def step_patronymic(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)
    interview_answers['patronymic'] = text if text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else ''
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.date_of_birth)
    message_text = '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 20.12.2000 (–î–î.–ú–ú.–ì–ì–ì–ì))'
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )


def step_date_of_birth(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    try:
        date_of_birth = datetime.strptime(text, '%d.%m.%Y')
        interview_answers = dict(user_interview.interview_answers)
        interview_answers['date_of_birth'] = str(date_of_birth.date())
        user_interview.interview_answers = interview_answers
        user_interview.update_step(InterviewStep.gender)
        message_text = '–£–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª'
        keyboard_markup = [
            [KeyboardButton(text='–ú—É–∂—Å–∫–æ–π'), KeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π')]
        ]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
    except Exception:
        bot.send_message(
            chat_id=user_interview.chat_id,
            text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã \n–ü—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: <b>20.12.2000 (–î–î.–ú–ú.–ì–ì–ì–ì)</b>',
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )


def step_gender(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–ú—É–∂—Å–∫–æ–π' or text == '–ñ–µ–Ω—Å–∫–∏–π':
        interview_answers = dict(user_interview.interview_answers)
        interview_answers['gender'] = text
        user_interview.interview_answers = interview_answers
        user_interview.update_step(InterviewStep.photo)
        message_text = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –í–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∫–µ—Ç—ã'
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        bot.send_message(
            chat_id=user_interview.chat_id,
            text='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨á',
            parse_mode=ParseMode.HTML,
        )


def step_photo(user_interview: Interview, bot: Bot, update: Update):
    if update.message.photo or update.message.document:
        user_photo_path = ''
        if update.message.document:
            file_id = update.message.document.file_id
            file: File = bot.getFile(file_id)
            user_photo_path = f'uploads/advisors/{user_interview.chat_id}/user_photo{Path(file.file_path).suffix}'
            file_buf = file.download_as_bytearray()
            default_storage.save(user_photo_path, ContentFile(file_buf))
            pass
        elif update.message.photo:
            file_id = update.message.photo[-1].file_id
            file: File = bot.getFile(file_id)
            user_photo_path = f'uploads/advisors/{user_interview.chat_id}/user_photo{Path(file.file_path).suffix}'
            file_buf = file.download_as_bytearray()
            default_storage.save(user_photo_path, ContentFile(file_buf))

        interview_answers = dict(user_interview.interview_answers)
        interview_answers['photo'] = user_photo_path
        user_interview.interview_answers = interview_answers
        user_interview.update_step(InterviewStep.phone_number)

        message_text = '–£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ –∑–Ω–∞–∫–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤)\n\n' \
                       '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"</b>'
        keyboard_markup = [
            [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', request_contact=True)]
        ]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
    else:
        bot.send_message(
            chat_id=user_interview.chat_id,
            text='–ó–∞–≥—Ä—É–∑–∏—Ç–µ –í–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∫–µ—Ç—ã',
            parse_mode=ParseMode.HTML,
        )


def step_phone_number(user_interview: Interview, bot: Bot, update: Update):
    if update.message.contact:
        interview_answers = dict(user_interview.interview_answers)
        interview_answers['phone_number'] = update.message.contact.phone_number
        user_interview.interview_answers = interview_answers
        user_interview.update_step(InterviewStep.email)
        message_text = '–£–∫–∞–∂–∏—Ç–µ –í–∞—à Email –∞–¥—Ä–µ—Å'
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        try:
            text = update.message.text.encode('utf-8').decode()
            if len(text) < 10 or len(text) > 11 or not text.isdigit():
                raise Exception()
            interview_answers = dict(user_interview.interview_answers)
            interview_answers['phone_number'] = text
            user_interview.interview_answers = interview_answers
            user_interview.update_step(InterviewStep.email)
            message_text = '–£–∫–∞–∂–∏—Ç–µ –í–∞—à Email –∞–¥—Ä–µ—Å'
            bot.send_message(
                chat_id=user_interview.chat_id,
                text=message_text,
                parse_mode=ParseMode.HTML,
                reply_markup=ReplyKeyboardRemove()
            )
        except Exception:
            bot.send_message(
                chat_id=user_interview.chat_id,
                text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ü—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: <b>89998883344 –∏–ª–∏ 9998883344</b>',
                parse_mode=ParseMode.HTML,
            )


def step_email(user_interview: Interview, bot: Bot, update: Update):
    regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    try:
        text = update.message.text.encode('utf-8').decode()
        if not re.fullmatch(regex, text):
            raise Exception()
        interview_answers = dict(user_interview.interview_answers)
        interview_answers['email'] = text
        user_interview.interview_answers = interview_answers
        user_interview.update_step(InterviewStep.social_networks)
        message_text = '–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –û–°–ù–û–í–ù–£–Æ –ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (VK, –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ –∏ –¥—Ä).' \
                       '\n–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª'
        keyboard_markup = [
            [KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')]
        ]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
    except Exception:
        bot.send_message(
            chat_id=user_interview.chat_id,
            text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã',
            parse_mode=ParseMode.HTML,
        )


def step_social_networks(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)
    interview_answers['social_networks'] = text if text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else ''
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.education)
    message_text = '–ë–ª–æ–∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )
    message_text = '–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –í–∞—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è'
    keyboard_markup = [
        [
            KeyboardButton(text='–í—ã—Å—à–µ–µ (–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç)'),
            KeyboardButton(text='–í—ã—Å—à–µ–µ (—Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç)'),
        ],
        [
            KeyboardButton(text='–í—ã—Å—à–µ–µ (–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞)'),
            KeyboardButton(text='–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞'),
        ],
        [
            KeyboardButton(text='–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ (–≤—ã–ø—É—Å–∫–Ω–æ–π –∫—É—Ä—Å)'),
        ]
    ]
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(keyboard_markup)
    )


def step_education(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–í—ã—Å—à–µ–µ (–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç)' or text == '–í—ã—Å—à–µ–µ (—Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç)' or text == '–í—ã—Å—à–µ–µ (–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞)' \
            or text == '–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞' or text == '–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ (–≤—ã–ø—É—Å–∫–Ω–æ–π –∫—É—Ä—Å)':
        interview_answers = dict(user_interview.interview_answers)
        interview_answers['education_level'] = text
        user_interview.interview_answers = interview_answers
        user_interview.update_step(InterviewStep.place_education)
        message_text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–ª—É—á–µ–Ω–Ω—É—é –í–∞–º–∏ —Ñ–æ—Ä–º—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –ø–æ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é'
        keyboard_markup = [
            [
                KeyboardButton(text='–í—ã—Å—à–µ–µ (–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç)'),
                KeyboardButton(text='–í—ã—Å—à–µ–µ (—Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç)'),
            ],
            [
                KeyboardButton(text='–í—ã—Å—à–µ–µ (–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞)'),
                KeyboardButton(text='–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞'),
            ],
            [
                KeyboardButton(text='–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ (–≤—ã–ø—É—Å–∫–Ω–æ–π –∫—É—Ä—Å –ø–æ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é)'),
                KeyboardButton(text='–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'),
            ],
            [
                KeyboardButton(text='–ö—É—Ä—Å—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏/ –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏'),
            ]
        ]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
    else:
        bot.send_message(
            chat_id=user_interview.chat_id,
            text="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨áÔ∏è",
            parse_mode=ParseMode.HTML,
        )


def step_place_education(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–í—ã—Å—à–µ–µ (–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç)' or text == '–í—ã—Å—à–µ–µ (—Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç)' or text == '–í—ã—Å—à–µ–µ (–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞)' \
            or text == '–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞' or text == '–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ (–≤—ã–ø—É—Å–∫–Ω–æ–π –∫—É—Ä—Å –ø–æ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é)' \
            or text == '–ö—É—Ä—Å—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏/ –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏' \
            or text == '–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ':
        interview_answers = dict(user_interview.interview_answers)
        interview_answers['place_education'] = text
        user_interview.interview_answers = interview_answers
        user_interview.update_step(InterviewStep.place_education_2)
        message_text = '–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö (–°–ü–û, –í–û), –≥–¥–µ –í—ã –æ–±—É—á–∞–ª–∏—Å—å.\n\n' \

        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
        message_text = '–í –¥–∞–Ω–Ω–æ–π –≥—Ä–∞—Ñ–µ üëá –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è.' \

        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        bot.send_message(
            chat_id=user_interview.chat_id,
            text="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨áÔ∏è",
            parse_mode=ParseMode.HTML,
        )


def step_place_education_2(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)

    if interview_answers.get('education_count'):
        education_count = interview_answers.get('education_count') + 1
    else:
        education_count = 1

    if interview_answers.get('education_list'):
        education_list = dict(interview_answers.get('education_list'))
        education_list[f'{education_count}'] = {
            'place_education': '',
            'napr_education': '',
            'place_education_stop': '',
            'doc_education': ''
        }
    else:
        education_list = dict()
        education_list[f'{education_count}'] = {
            'place_education': '',
            'napr_education': '',
            'place_education_stop': '',
            'doc_education': ''
        }
    education_list[f'{education_count}']['place_education'] = text
    interview_answers['education_count'] = education_count
    interview_answers['education_list'] = education_list
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.napr_education)
    message_text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )


def step_napr_education(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)
    education_count = interview_answers.get('education_count')
    education_list = dict(interview_answers.get('education_list'))
    education_list[f'{education_count}']['napr_education'] = text
    interview_answers['education_list'] = education_list
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.place_education_stop)
    message_text = '–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è'
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )


def step_place_education_stop(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)
    education_count = interview_answers.get('education_count')
    education_list = dict(interview_answers.get('education_list'))
    education_list[f'{education_count}']['place_education_stop'] = text
    interview_answers['education_list'] = education_list
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.doc_education)
    message_text = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–±–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è) –∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç PDF)'
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )


def step_doc_education(user_interview: Interview, bot: Bot, update: Update):
    if update.message.photo or update.message.document:
        doc_education = ''
        interview_answers = dict(user_interview.interview_answers)
        education_count = interview_answers.get('education_count')
        education_list = dict(interview_answers.get('education_list'))

        if update.message.document:
            file_id = update.message.document.file_id
            file: File = bot.getFile(file_id)
            doc_education = f'uploads/advisors/{user_interview.chat_id}/doc_education/{education_count}{Path(file.file_path).suffix}'
            file_buf = file.download_as_bytearray()
            default_storage.save(doc_education, ContentFile(file_buf))
            pass
        elif update.message.photo:
            file_id = update.message.photo[-1].file_id
            file: File = bot.getFile(file_id)
            doc_education = f'uploads/advisors/{user_interview.chat_id}/doc_education/{education_count}{Path(file.file_path).suffix}'
            file_buf = file.download_as_bytearray()
            default_storage.save(doc_education, ContentFile(file_buf))

        education_list[f'{education_count}']['doc_education'] = doc_education
        interview_answers['education_list'] = education_list
        user_interview.interview_answers = interview_answers
        user_interview.update_step(InterviewStep.add_education)

        message_text = '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ—Å—Ç–æ –æ–±—É—á–µ–Ω–∏—è?'
        keyboard_markup = [[
            KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –æ–±—É—á–µ–Ω–∏—è'),
            KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        ]]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
    else:
        bot.send_message(
            chat_id=user_interview.chat_id,
            text='–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–±–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è) –∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç PDF)',
            parse_mode=ParseMode.HTML,
        )


def step_add_education(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –æ–±—É—á–µ–Ω–∏—è':
        user_interview.update_step(InterviewStep.place_education_2)
        message_text = '–í –¥–∞–Ω–Ω–æ–π –≥—Ä–∞—Ñ–µ üëá –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è.'
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
    elif text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        user_interview.update_step(InterviewStep.work_experience)
        message_text = '–ë–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä—É–¥–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
        message_text = '–£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç –í–∞—à–µ–π —Ç—Ä—É–¥–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç. ' \
                       '–í –¥–∞–Ω–Ω–æ–π –≥—Ä–∞—Ñ–µüëá —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —è–≤–ª—è—é—â–µ–π—Å—è –≤–∞—à–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–º ' \
                       '–∏–ª–∏ —Ç–µ–∫—É—â–∏–º –º–µ—Å—Ç–æ–º —Ä–∞–±–æ—Ç—ã.'
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        bot.send_message(
            chat_id=user_interview.chat_id,
            text='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨á',
            parse_mode=ParseMode.HTML,
        )


def step_work_experience(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)

    if interview_answers.get('work_count'):
        work_count = interview_answers.get('work_count') + 1
    else:
        work_count = 1

    if interview_answers.get('work_list'):
        work_list = dict(interview_answers.get('work_list'))
        work_list[f'{work_count}'] = {
            'work_experience': '',
            'job_title': '',
        }
    else:
        work_list = dict()
        work_list[f'{work_count}'] = {
            'work_experience': '',
            'job_title': '',
        }
    work_list[f'{work_count}']['work_experience'] = text
    interview_answers['work_count'] = work_count
    interview_answers['work_list'] = work_list
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.job_title)
    message_text = '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å'
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )


def step_job_title(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)

    work_count = interview_answers.get('work_count')
    work_list = dict(interview_answers.get('work_list'))
    work_list[f'{work_count}']['job_title'] = text
    interview_answers['work_list'] = work_list
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.add_work)

    message_text = '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã?'
    keyboard_markup = [[
        KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã'),
        KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
    ]]
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(keyboard_markup)
    )


def step_add_work(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã':
        user_interview.update_step(InterviewStep.work_experience)
        message_text = '–£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç –í–∞—à–µ–π —Ç—Ä—É–¥–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç. ' \
                       '–í –¥–∞–Ω–Ω–æ–π –≥—Ä–∞—Ñ–µüëá —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —è–≤–ª—è—é—â–µ–π—Å—è –≤–∞—à–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–º ' \
                       '–∏–ª–∏ —Ç–µ–∫—É—â–∏–º –º–µ—Å—Ç–æ–º —Ä–∞–±–æ—Ç—ã.'
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
    elif text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        user_interview.update_step(InterviewStep.prof_skills)
        message_text = '–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –í–∞—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ (–¥–æ 500 –∑–Ω–∞–∫–æ–≤).\n\n' \
                       '<i>–ü—Ä–∏–º–µ—Ä: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤, –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Ç.–¥.</i>'
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        bot.send_message(
            chat_id=user_interview.chat_id,
            text='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨á',
            parse_mode=ParseMode.HTML,
        )


def step_prof_skills(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)
    interview_answers['prof_skills'] = text
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.pers_qualities)
    message_text = '–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –í–∞—à–∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–æ 500 –∑–Ω–∞–∫–æ–≤).\n\n' \
                   '<i>–ü—Ä–∏–º–µ—Ä: –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å, —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ —Ç.–¥.</i>'
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )


def step_pers_qualities(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)
    interview_answers['pers_qualities'] = text
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.achievements)
    message_text = '–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö (–ø–µ—Ä–µ—á–µ–Ω—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤,' \
                   ' –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω—Ç–æ–≤, –ø–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö). ' \
                   '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤/–ø—É–±–ª–∏–∫–∞—Ü–∏–π (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏). \n –û–±—ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì –¥–æ 1500 –∑–Ω–∞–∫–æ–≤.'
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )


def step_achievements(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)
    interview_answers['achievements'] = text
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.exp_children)
    message_text = '–û–ø–∏—à–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç—Å–∫–∏–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–æ–º (–≤–æ–∂–∞—Ç—Å–∫–∞—è, –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∞—è, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏ –∏–Ω–∞—è ' \
                   '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å). \n –û–±—ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì –¥–æ 1500 –∑–Ω–∞–∫–æ–≤.'
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )


def step_exp_children(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)
    interview_answers['exp_children'] = text
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.ed_oo_work)
    message_text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π ' \
                   '–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º (–æ–¥–Ω–∞ –û–û) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª'
    keyboard_markup = [[
        KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    ]]
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(keyboard_markup)
    )


def step_ed_oo_work(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    interview_answers = dict(user_interview.interview_answers)
    interview_answers['ed_oo_work'] = text if text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else ''
    user_interview.interview_answers = interview_answers
    user_interview.update_step(InterviewStep.adm_okr)
    message_text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π(–µ) –æ–∫—Ä—É–≥(–∞), –≤ –∫–æ—Ç–æ—Ä–æ–º(—ã—Ö) –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º'
    keyboard_markup = [
        [
            KeyboardButton(text='–¶–ê–û'),
            KeyboardButton(text='–°–í–ê–û'),
            KeyboardButton(text='–í–ê–û'),
        ],
        [
            KeyboardButton(text='–Æ–í–ê–û'),
            KeyboardButton(text='–ó–ê–û'),
            KeyboardButton(text='–°–ó–ê–û'),
        ],
        [
            KeyboardButton(text='–Æ–ó–ê–û'),
            KeyboardButton(text='–Æ–ê–û'),
            KeyboardButton(text='–°–ê–û'),
        ],
        [
            KeyboardButton(text='–ó–µ–ª–ê–û'),
            KeyboardButton(text='–¢–∏–ù–ê–û'),
        ],
    ]
    bot.send_message(
        chat_id=user_interview.chat_id,
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(keyboard_markup)
    )


def step_adm_okr(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–¶–ê–û' or text == '–°–í–ê–û' or text == '–í–ê–û' or text == '–Æ–í–ê–û' or text == '–ó–ê–û' or text == '–°–ó–ê–û' \
            or text == '–Æ–ó–ê–û' or text == '–Æ–ê–û' or text == '–°–ê–û' or text == '–ó–µ–ª–ê–û' or text == '–¢–∏–ù–ê–û':
        interview_answers = dict(user_interview.interview_answers)
        if interview_answers.get('adm_okr_list'):
            adm_okr_list = list(interview_answers.get('adm_okr_list'))
        else:
            adm_okr_list = list()
        adm_okr_list.append(text)

        interview_answers['adm_okr_list'] = adm_okr_list
        user_interview.interview_answers = interview_answers
        user_interview.update_step(InterviewStep.add_adm_okr)

        message_text = '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º?'
        keyboard_markup = [[
            KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥'),
            KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        ]]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
    else:
        bot.send_message(
            chat_id=user_interview.chat_id,
            text='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨á',
            parse_mode=ParseMode.HTML,
        )


def step_add_adm_okr(user_interview: Interview, bot: Bot, update: Update):
    text = update.message.text.encode('utf-8').decode()
    if text == '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥':
        user_interview.update_step(InterviewStep.adm_okr)
        message_text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π(–µ) –æ–∫—Ä—É–≥(–∞), –≤ –∫–æ—Ç–æ—Ä–æ–º(—ã—Ö) –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º'
        keyboard_markup = [
            [
                KeyboardButton(text='–¶–ê–û'),
                KeyboardButton(text='–°–í–ê–û'),
                KeyboardButton(text='–í–ê–û'),
            ],
            [
                KeyboardButton(text='–Æ–í–ê–û'),
                KeyboardButton(text='–ó–ê–û'),
                KeyboardButton(text='–°–ó–ê–û'),
            ],
            [
                KeyboardButton(text='–Æ–ó–ê–û'),
                KeyboardButton(text='–Æ–ê–û'),
                KeyboardButton(text='–°–ê–û'),
            ],
            [
                KeyboardButton(text='–ó–µ–ª–ê–û'),
                KeyboardButton(text='–¢–∏–ù–ê–û'),
            ],
        ]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
    elif text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        user_interview.save_interview_answers_to_table()
        user_interview.update_step(InterviewStep.start_test)
        message_text = '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n ' \
                       '–¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞.\n ' \
                       '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–∞—ë—Ç—Å—è 60 –º–∏–Ω—É—Ç'
        keyboard_markup = [[
            KeyboardButton(text='–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'),
        ]]
        bot.send_message(
            chat_id=user_interview.chat_id,
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardMarkup(keyboard_markup)
        )
    else:
        bot.send_message(
            chat_id=user_interview.chat_id,
            text='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨á',
            parse_mode=ParseMode.HTML,
        )
